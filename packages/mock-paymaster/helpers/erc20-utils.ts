import {
    type Account,
    type Address,
    type Chain,
    type PublicClient,
    type Transport,
    type WalletClient,
    concat,
    encodeFunctionData,
    getCreate2Address,
    hexToBigInt,
    pad,
    parseAbi,
    toHex
} from "viem"
import { getAnvilWalletClient, getPublicClient } from "./utils.js"

const erc20Bytecode = concat([
    "",
    pad(toHex(18n)) // constructor args (token_decimals)
])

const create2Salt =
    "0x0000000000000000000000000000000000000000000000000000000000000000"

export const deployErc20Token = async (
    walletClient: WalletClient<Transport, Chain, Account>,
    publicClient: PublicClient
) => {
    if ((await publicClient.getCode({ address: erc20Address })) === undefined) {
        await walletClient.sendTransaction({
            to: "0x4e59b44847b379578588920ca78fbf26c0b4956c",
            data: concat([create2Salt, erc20Bytecode])
        })
    }
}

export const tokenBalanceOf = async (holder: Address, anvilRpc: string) => {
    const publicClient = getPublicClient(anvilRpc)

    const balance = await publicClient.call({
        to: erc20Address,
        value: 0n,
        data: encodeFunctionData({
            abi: parseAbi(["function balanceOf(address)"]),
            args: [holder]
        })
    })

    return hexToBigInt(balance.data ?? "0x")
}

export const sudoMintTokens = async ({
    amount,
    to,
    anvilRpc
}: {
    amount: bigint
    to: Address
    anvilRpc: string
}) => {
    const walletClient = getAnvilWalletClient({ addressIndex: 0, anvilRpc })

    await walletClient.sendTransaction({
        to: erc20Address,
        value: 0n,
        data: encodeFunctionData({
            abi: parseAbi(["function sudoMint(address, uint256)"]),
            args: [to, amount]
        })
    })
}

export const erc20Address = getCreate2Address({
    from: "0x4e59b44847b379578588920ca78fbf26c0b4956c",
    salt: create2Salt,
    bytecode: erc20Bytecode
})
